# Schedule definitions for thorn Z4cowCarpet

STORAGE: W[3]
STORAGE: gamma_tilde[3]
STORAGE: K_hat[3]
STORAGE: A_tilde[3]
STORAGE: Gam_tilde[3]
STORAGE: Theta[3]
STORAGE: alphaG[3]
STORAGE: betaG[3]

STORAGE: ZtC[1]
STORAGE: HC[1]
STORAGE: MtC[1]
STORAGE: allC[1]

STORAGE: W_rhs[1]
STORAGE: gamma_tilde_rhs[1]
STORAGE: K_hat_rhs[1]
STORAGE: A_tilde_rhs[1]
STORAGE: Gam_tilde_rhs[1]
STORAGE: Theta_rhs[1]
STORAGE: alphaG_rhs[1]
STORAGE: betaG_rhs[1]




SCHEDULE GROUP Z4cowCarpet_InitialGroup AT initial AFTER ADMBase_PostInitial
{
} "Convert ADM to Z4c variables"




SCHEDULE Z4cowCarpet_Initial1 IN Z4cowCarpet_InitialGroup
{
  LANG: C
  READS: ADMBase::metric(everywhere)
  READS: ADMBase::curv(everywhere)
  READS: ADMBase::lapse(everywhere)
  READS: ADMBase::shift(everywhere)
  WRITES: W(everywhere)
  WRITES: gamma_tilde(everywhere)
  WRITES: K_hat(everywhere)
  WRITES: A_tilde(everywhere)
  WRITES: Gam_tilde(everywhere)
  WRITES: Theta(everywhere)
  WRITES: alphaG(everywhere)
  WRITES: betaG(everywhere)
} "Convert ADM to Z4c variables, part 1"

SCHEDULE Z4cowCarpet_Initial2 IN Z4cowCarpet_InitialGroup AFTER Z4cowCarpet_Initial1
{
  LANG: C
  READS: gamma_tilde(everywhere)
  WRITES: Gam_tilde(interior)
  SYNC: Gam_tilde
} "Convert ADM to Z4c variables, part 2"

schedule Z4cowCarpet_SelectBoundConds In Z4cowCarpet_InitialGroup AFTER Z4cowCarpet_Initial2
{
  LANG: C
  OPTIONS: level
  SYNC: Gam_tilde
} "select boundary conditions"

schedule group ApplyBCs as Z4cowCarpet_ApplyBCs in Z4cowCarpet_InitialGroup after Z4cowCarpet_SelectBoundConds
{
} "Apply boundary conditions controlled by thorn Boundary"

SCHEDULE Z4cowCarpet_RegisterVars IN MoL_Register
{
  LANG: C
  OPTIONS: GLOBAL
} "register evolution system with mol"

SCHEDULE Z4cowCarpet_RHS IN MoL_CalcRHS
{
  LANG: C
  READS: W(everywhere)
  READS: gamma_tilde(everywhere)
  READS: K_hat(everywhere)
  READS: A_tilde(everywhere)
  READS: Gam_tilde(everywhere)
  READS: Theta(everywhere)
  READS: alphaG(everywhere)
  READS: betaG(everywhere)
  READS: TmunuBase::stress_energy_scalar(interior)
  READS: TmunuBase::stress_energy_vector(interior)
  READS: TmunuBase::stress_energy_tensor(interior)
  WRITES: W_rhs(interior)
  WRITES: gamma_tilde_rhs(interior)
  WRITES: K_hat_rhs(interior)
  WRITES: A_tilde_rhs(interior)
  WRITES: Gam_tilde_rhs(interior)
  WRITES: Theta_rhs(interior)
  WRITES: alphaG_rhs(interior)
  WRITES: betaG_rhs(interior)
} "Calculate Z4c RHS"

SCHEDULE Z4cowCarpet_Enforce IN MoL_PostStep
{
  LANG: C
  READS: W(interior)
  READS: gamma_tilde(interior)
  READS: A_tilde(interior)
  READS: alphaG(interior)
  WRITES: W(interior)
  WRITES: gamma_tilde(interior)
  WRITES: A_tilde(interior)
  WRITES: alphaG(interior)
  SYNC: W
  SYNC: gamma_tilde
  SYNC: K_hat
  SYNC: A_tilde
  SYNC: Gam_tilde
  SYNC: Theta
  SYNC: alphaG
  SYNC: betaG
} "Enforce algebraic Z4c constraints"

schedule Z4cowCarpet_SelectBoundConds in MoL_PostStep after Z4cowCarpet_Enforce
{
  LANG: C
  OPTIONS: level
  SYNC: W
  SYNC: gamma_tilde
  SYNC: K_hat
  SYNC: A_tilde
  SYNC: Gam_tilde
  SYNC: Theta
  SYNC: alphaG
  SYNC: betaG
} "select boundary conditions"

schedule group ApplyBCs as Z4cowCarpet_ApplyBCs in MoL_PostStep after Z4cowCarpet_SelectBoundConds
{
} "Apply boundary conditions controlled by thorn Boundary"

if (calc_ADM_vars) {
  SCHEDULE Z4cowCarpet_ADM IN MoL_PostStep AFTER Z4cowCarpet_ApplyBCs
  {
    LANG: C
    READS: W(everywhere)
    READS: gamma_tilde(everywhere)
    READS: K_hat(everywhere)
    READS: A_tilde(everywhere)
    #READS: Gam_tilde(everywhere)
    READS: Theta(everywhere)
    READS: alphaG(everywhere)
    READS: betaG(everywhere)
    WRITES: ADMBase::metric(everywhere)
    WRITES: ADMBase::curv(everywhere)
    WRITES: ADMBase::lapse(everywhere)
    WRITES: ADMBase::shift(everywhere)
    #WRITES: ADMBase::dtlapse(everywhere)
    #WRITES: ADMBase::dtshift(everywhere)
  } "Convert Z4c to ADM variables"
}

if (calc_constraints) {
  SCHEDULE Z4cowCarpet_Constraints AT analysis
  {
    LANG: C
    READS: W(everywhere)
    READS: gamma_tilde(everywhere)
    READS: K_hat(everywhere)
    READS: A_tilde(everywhere)
    READS: Gam_tilde(everywhere)
    READS: Theta(everywhere)
    READS: alphaG(everywhere)
    READS: betaG(everywhere)
    READS: TmunuBase::stress_energy_scalar(interior)
    READS: TmunuBase::stress_energy_vector(interior)
    READS: TmunuBase::stress_energy_tensor(interior)
    WRITES: ZtC(interior)
    WRITES: HC(interior)
    WRITES: MtC(interior)
    #WRITES: allC(interior)
  } "Calculate Z4c Constraints"
}

